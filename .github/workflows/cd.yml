name: Deploy

on:
  push:
    tags:
      - "v*"

jobs:
  CD:
    name: CD SB
    runs-on: ubuntu-latest

    # The environment this job references. We now use this for our environment variables.
    environment:
      name: Development

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          # Shallow clones should be disabled for a better relevancy of analysis.
          #Â But we choose only 1 commit because it is way enough

      - name: Writing .env config file for Development (/server)
        run: |
          cd server
          echo -e "DATABASE = "${{ secrets.DB_NAME }}"\nUSERNAME = "${{ secrets.DB_USERNAME }}"\nPASSWORD = "${{ secrets.DB_PASSWORD }}"\nHOST = "${{ secrets.DB_HOST }}"\nPORT = "${{ secrets.DB_PORT }}"\nAZURE_CONTAINER_NAME = ${{ secrets.AZURE_CONTAINER_NAME }}\nAZURE_CONNECTION_STRING = ${{ secrets.AZURE_CONNECTION_STRING }}\n" >> .env

      - name: Writing .env config file for Development (/client)
        run: |
          cd client
          echo -e "REACT_APP_AZURE_BLOB_STORAGE_ADRESS = "${{ secrets.REACT_APP_AZURE_BLOB_STORAGE_ADRESS }}"\nREACT_APP_MAPBOX_ACCESS_TOKEN = "${{ secrets.REACT_APP_MAPBOX_ACCESS_TOKEN }}"\n" >> .env

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.4.1
        with:
          node-version: 16

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Installation
        run: yarn install
      - name: Client installation
        run: |
          cd client 
          yarn install
      - name: Server installation
        run: |
          cd server
          yarn install

      - name: Build
        run: |
          cd client
          yarn run build

      - name: Writing .env config file for Tests
        run: |
          cd server
          rm .env
          echo -e "DATABASE = "${{ secrets.DB_NAME }}"\nUSERNAME = "${{ secrets.DB_USERNAME }}"\nPASSWORD = "${{ secrets.DB_PASSWORD }}"\nHOST = "${{ secrets.DB_HOST }}"\nPORT = "${{ secrets.DB_PORT }}"\nAZURE_CONTAINER_NAME = ${{ secrets.AZURE_CONTAINER_NAME }}\nAZURE_CONNECTION_STRING = ${{ secrets.AZURE_CONNECTION_STRING }}\n" >> .env

      - name: Writing .env config file for Development (/client)
        run: |
          cd client
          rm .env
          echo -e "REACT_APP_AZURE_BLOB_STORAGE_ADRESS = "${{ secrets.REACT_APP_AZURE_BLOB_STORAGE_ADRESS }}"\nREACT_APP_MAPBOX_ACCESS_TOKEN = "${{ secrets.REACT_APP_MAPBOX_ACCESS_TOKEN }}"\n" >> .env

      - name: Tests
        run: |
          cd server
          yarn run coverage
          rm -r coverage/sonar.xml
          rm -r coverage/lcov-report
          rm -r .nyc_output
        env:
          CI: true
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Generate docs
        run: |
          yarn run asciidoc
          rm docs/sb.html

      - name: Release
        uses: ncipollo/release-action@v1
        id: create_release
        with:
          artifacts: docs/sb.pdf
          bodyFile: CHANGELOG.md
          token: ${{ secrets.GITHUB_TOKEN }}
